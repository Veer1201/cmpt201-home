#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define ASSERT(expr)                                                           \
  {                                                                            \
    if (!(expr)) {                                                             \
      fprintf(stderr, "Assertion failed: %s\n", #expr);                        \
      exit(1);                                                                 \
    }                                                                          \
  }

#define TEST(expr)                                                             \
  {                                                                            \
    if (!(expr)) {                                                             \
      fprintf(stderr, "Test failed: %s\n", #expr);                             \
      exit(1);                                                                 \
    } else {                                                                   \
      printf("Test passed: %s\n", #expr);                                      \
    }                                                                          \
  }

typedef struct node {
  uint64_t data;
  struct node *next;
} node_t;

node_t *head = NULL;

void insert_sorted(uint64_t data) {
  node_t *new_node = malloc(sizeof(node_t));
  ASSERT(new_node != NULL);
  new_node->data = data;
  new_node->next = NULL;

  if (head == NULL || data < head->data) {
    new_node->next = head;
    head = new_node;
  } else {
    node_t *curr = head;

    while (curr->next != NULL && curr->next->data < data) {
      curr = curr->next;
    }

    new_node->next = curr->next;
    curr->next = new_node;
  }
}

int index_of(uint64_t data) {
  node_t *curr = head;
  int index = 0;

  while (curr != NULL) {
    if (curr->data == data) {
      return index;
    }
    curr = curr->next;
    index++;
  }

  return -1;
}

int main() {
  insert_sorted(1);
  insert_sorted(2);
  insert_sorted(5);
  insert_sorted(3);

  TEST(index_of(1) == 0);
  TEST(index_of(2) == 1);
  TEST(index_of(3) == 2);
  TEST(index_of(5) == 3);

  insert_sorted(0);
  insert_sorted(4);

  TEST(index_of(0) == 0);
  TEST(index_of(1) == 1);
  TEST(index_of(2) == 2);
  TEST(index_of(3) == 3);
  TEST(index_of(4) == 4);
  TEST(index_of(5) == 5);

  printf("All tests passed!\n");

  return 0;
}

///Code of example_2.c file
///


#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define ASSERT(condition) \
    do { \
        if (!(condition)) { \
            fprintf(stderr, "Assertion failed: (%s) in %s, line %d\n", \
                    #condition, __FILE__, __LINE__); \
            abort(); \
        } \
    } while (0)

#define TEST(expr) \
    { \
        if (!(expr)) { \
            fprintf(stderr, "Test failed: %s\n", #expr); \
            exit(1); \
        } \
    }

typedef struct node {
    uint64_t data;
    struct node *next;
} node_t;

typedef struct info {
    uint64_t sum;
} info_t;

node_t *head = NULL;
info_t info = {0};

void insert_sorted(uint64_t data) {
    node_t *new_node = malloc(sizeof(node_t));
    ASSERT(new_node != NULL);
    new_node->data = data;
    new_node->next = NULL;

    if (head == NULL) {
        head = new_node;
    } else if (data < head->data) {
        new_node->next = head;
        head = new_node;
    } else {
        node_t *curr = head;
        node_t *prev = NULL;

        while (curr != NULL) {
            if (data < curr->data) {
                break;
            }
            prev = curr;
            curr = curr->next;
        }

        prev->next = new_node;
        if (curr != NULL) {
            new_node->next = curr;
        }
    }
    info.sum += data;
}

int index_of(uint64_t data) {
    node_t *curr = head;
    int index = 0;

    while (curr != NULL) {
        if (curr->data == data) {
            return index;
        }
        curr = curr->next;
        index++;
    }
    return -1;
}

uint64_t sum_list_elements() {
    uint64_t current_sum = 0;
    node_t* current_node = head;

    while (current_node != NULL) {
        current_sum += current_node->data;
        current_node = current_node->next;
    }
    return current_sum;
}

int main() {
    insert_sorted(1);
    insert_sorted(3);
    insert_sorted(5);
    insert_sorted(2);

    TEST(info.sum == 1 + 3 + 5 + 2);
    
    printf("Original tests passed.\n");
    
    uint64_t list_sum = sum_list_elements();

    printf("Verifying list sum against info.sum...\n");
    
    ASSERT(list_sum == info.sum);

    printf("Sums verified successfully!\n");
    
    ASSERT(index_of(1) == 0);
    ASSERT(index_of(2) == 1);
    ASSERT(index_of(3) == 2);
    ASSERT(index_of(5) == 3);
    
    printf("All assertions passed.\n");

    return 0;
}
